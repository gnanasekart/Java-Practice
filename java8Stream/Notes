
1. Different Collect.Collectors Methods

list.stream().collect(Collectors.toList())

list.stream().map(p -> p.getEmail()).collect(Collectors.toCollection(TestSet::new))

list.stream().collect(Collectors.groupingBy(p -> p.getGender()))

list.stream().map(p -> p.getName()).collect(Collectors.joining(", "))


2. Convert one class object into another class object method

consider Employee and Engineer are two pojo class with two variable name and age

List<Engineer> softwareEngineer = Arrays.asList(
new Engineer("sekar", 30),
new Engineer("Gnana", 31),
new Engineer("manoj", 21));

List<Employee> employeeList = softwareEngineer.stream()
.map(Engineer -> {
	Employee employee = new Employee();
	employee.setName(Engineer.getName());
	employee.setAge(Engineer.getAge());
	return employee;
	}).collect(Collectors.toList());
	
	sop(employeeList);
	
3. flatmap

List<String> person = perSonList
		.getAllPersons().stream()
		.map(Person::getHobbies)//Stream<List<String>>
		.flatMap(List::stream)//Stream<String>
		.distinct()
		.collect(Collectors.toList());
		
4. Natural sort
list1.stream().sorted().forEach(System.out::println);

5. Reverse sort
list1.stream().sorted(Comparator.reverseOrder()).forEach(System.out::println);

6. Natural sort with comparator
list1.stream().sorted(Comparator.comparing(person:: getName)).forEach(System.out::println);

7. Reverse sort with comparator
list1.stream().sorted(Comparator.comparing(person:: getName).reversed()).forEach(System.out::println);